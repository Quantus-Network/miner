name: Publish draft release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Semver (e.g. 0.3.2 or 0.3.2-beta.1)"
        required: true
        type: string

permissions:
  contents: write

jobs:
  bump:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semver.outputs.version }}
      tag: ${{ steps.meta.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate semver
        id: semver
        run: |
          V="${{ inputs.version }}"
          if [[ ! "$V" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z\.\-]+)?$ ]]; then
            echo "Invalid semver: $V" >&2
            exit 1
          fi
          echo "version=$V" >> "$GITHUB_OUTPUT"
      - name: Set tag output
        id: meta
        run: echo "tag=v${{ steps.semver.outputs.version }}" >> "$GITHUB_OUTPUT"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install jq and cargo-edit
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          cargo install cargo-edit

      - name: Bump package.json
        run: |
          V="${{ steps.semver.outputs.version }}"
          node -e "const fs=require('fs');const p=JSON.parse(fs.readFileSync('package.json','utf8'));p.version='${V}';fs.writeFileSync('package.json',JSON.stringify(p,null,2)+'\n')"

      - name: Bump src-tauri/tauri.conf.json
        run: |
          V="${{ steps.semver.outputs.version }}"
          jq --arg v "$V" '
            (.version        |= $v)
          ' src-tauri/tauri.conf.json > /tmp/tauri.conf.json
          mv /tmp/tauri.conf.json src-tauri/tauri.conf.json

      - name: Bump src-tauri/Cargo.toml
        run: |
          V="${{ steps.semver.outputs.version }}"
          cargo set-version --manifest-path src-tauri/Cargo.toml "$V"

      - name: Upload bumped source
        uses: actions/upload-artifact@v4
        with:
          name: source-v${{ steps.semver.outputs.version }}
          path: |
            .
            !.git
            !node_modules
            !src-tauri/target
          retention-days: 7

  verify-versions:
    name: Verify versions
    needs: bump
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.out.outputs.version }}
      tag: ${{ steps.out.outputs.tag }}
    steps:
      - name: Download bumped source
        uses: actions/download-artifact@v4
        with:
          name: source-v${{ needs.bump.outputs.version }}
          path: .

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Read and verify versions
        id: out
        run: |
          V="${{ needs.bump.outputs.version }}"
          TAG="v$V"
          echo "version=$V" >> "$GITHUB_OUTPUT"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          PKG=$(node -p "require('./package.json').version")
          TAURI=$(node -p "JSON.parse(require('fs').readFileSync('src-tauri/tauri.conf.json','utf8')).version")
          PY='import tomllib,sys;print(tomllib.load(open("src-tauri/Cargo.toml","rb"))["package"]["version"])'
          CARGO=$(python3 -c "$PY")
          echo "Tag:             $TAG"
          echo "Version:         $V"
          echo "package.json:    $PKG"
          echo "tauri.conf.json: $TAURI"
          echo "Cargo.toml:      $CARGO"
          if [ "$PKG" != "$V" ] || [ "$TAURI" != "$V" ] || [ "$CARGO" != "$V" ]; then
            echo "‚ùå Version mismatch; make sure all files match $V"
            exit 1
          fi

  build:
    name: Build ${{ matrix.platform }}
    needs: verify-versions
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux-x86_64
            os: ubuntu-latest
          - platform: macos-universal
            os: macos-latest
          - platform: windows-x86_64
            os: windows-latest

    steps:
      - name: Download bumped source
        uses: actions/download-artifact@v4
        with:
          name: source-v${{ needs.verify-versions.outputs.version }}
          path: .

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      # Linux build deps for Tauri/Wry/WebKitGTK
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pkg-config \
            libglib2.0-dev \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Install JS deps
        run: pnpm install --frozen-lockfile

      # Optional: cache cargo registry/builds to speed repeat builds
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build (no release)
        run: pnpm tauri build

      - name: Upload Tauri bundles
        uses: actions/upload-artifact@v4
        with:
          name: bundles-${{ matrix.platform }}-v${{ needs.verify-versions.outputs.version }}
          path: |
            src-tauri/target/release/bundle/**/*
          if-no-files-found: ignore
          retention-days: 7

      # Portable, user-space artifacts (no root/admin required)
      - name: Package Linux portable tar.gz
        if: matrix.os == 'ubuntu-latest'
        run: |
          tar -C src-tauri/target/release -czf quantus-miner-${{ needs.verify-versions.outputs.version }}-linux-x86_64.tar.gz quantus-miner

      - name: Upload Linux portable tar.gz
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: portable-linux-x86_64-v${{ needs.verify-versions.outputs.version }}
          path: quantus-miner-${{ needs.verify-versions.outputs.version }}-linux-x86_64.tar.gz
          if-no-files-found: error
          retention-days: 7

      - name: Package Windows portable zip
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $Version = "${{ needs.verify-versions.outputs.version }}"
          $Out = "quantus-miner-$Version-windows-x86_64.zip"
          Compress-Archive -Path "src-tauri\target\release\quantus-miner.exe" -DestinationPath $Out -Force

      - name: Upload Windows portable zip
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: portable-windows-x86_64-v${{ needs.verify-versions.outputs.version }}
          path: quantus-miner-${{ needs.verify-versions.outputs.version }}-windows-x86_64.zip
          if-no-files-found: error
          retention-days: 7

  commit_tag:
    name: Commit and tag
    needs: [verify-versions, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download bumped source
        uses: actions/download-artifact@v4
        with:
          name: source-v${{ needs.verify-versions.outputs.version }}
          path: .

      - name: Commit and tag
        run: |
          V="${{ needs.bump.outputs.version }}"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add package.json src-tauri/tauri.conf.json src-tauri/Cargo.toml
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "chore(release): v$V"
          fi
          git tag "v$V"
          git push origin HEAD
          git push origin "v$V"

  publish:
    name: Publish draft release
    needs: [commit_tag, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-v${{ github.event.inputs.version }}*"
          merge-multiple: true
          path: ./artifacts

      - name: Create GitHub draft release and upload artifacts
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: "Quantus Miner v${{ github.event.inputs.version }}"
          body: "Automated Tauri draft release for v${{ github.event.inputs.version }}"
          draft: true
          prerelease: ${{ contains(github.event.inputs.version, '-') }}
          files: ./artifacts/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
